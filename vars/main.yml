---
_rundeck_conditionl_packages:
  - name: openjdk-8-jre-headless
    condition: "{{ rundeck_install_java }}"
  - name: rundeck-cli
    condition: "{{ rundeck_cli_enable }}"
  - name: python-lxml
    condition: "{{ rundeck_set_session_timeout }}"
  - name: openssl
    condition: "{{ rundeck_ssl_enable or rundeck_trust_certs|length }}"
_rundeck_conditional_packages_to_install: "{{ _rundeck_conditionl_packages | selectattr('condition') | map(attribute='name') | list }}"
_rundeck_package: rundeck{{ '=' + rundeck_version if rundeck_version|length else '' }}
_rundeck_packages: "{{ [_rundeck_package] + _rundeck_conditional_packages_to_install }}"

# These might become customizable in a later version of the role.
rundeck_config_dir: /etc/rundeck
rundeck_base_dir: /var/lib/rundeck
rundeck_projects_dir: /var/rundeck/projects
rundeck_user: rundeck
rundeck_group: rundeck
rundeck_ssl_dir: "{{ rundeck_config_dir }}/ssl"
rundeck_keystore: "{{ rundeck_ssl_dir }}/keystore"
rundeck_truststore: "{{ rundeck_ssl_dir }}/truststore"
rundeck_static_tokens_file: "{{ rundeck_config_dir }}/tokens.properties"

_rundeck_cli_static_token:
  user: cliuser
  token: "{{ _cli_token }}"
_rundeck_api_static_token:
  user: apiuser
  token: "{{ _api_token }}"

_rundeck_static_tokens: "{{ rundeck_static_tokens + ([_rundeck_cli_static_token] if rundeck_cli_auto_token else []) + ([_rundeck_api_static_token] if rundeck_api_auto_token else []) }}"

_rundeck_standard_jvm_settings:
  - -Dserver.http.host={{ rundeck_listen_address }}
  - -Xmx{{ rundeck_maximum_heap_size }}
  - -Xms{{ rundeck_initial_heap_size }}
  - -XX:MaxMetaspaceSize={{ rundeck_maximum_metaspace_size }}
  - -server
_rundeck_jvm_settings: "{{ rundeck_extra_jvm_settings + _rundeck_standard_jvm_settings }}"

_rundeck_config:
  - parameter: rdeck.base
    value: "{{ rundeck_base_dir }}"
  - parameter: rss.enabled
    value: "{{ 'true' if rundeck_rss_enabled else 'false' }}"
  - parameter: rundeck.executionMode
    value: "{{ rundeck_execution_mode }}"
  - parameter: rundeck.log4j.config.file
    value: "{{ rundeck_config_dir }}/log4j.properties"
  - parameter: rundeck.feature.repository.enabled
    value: "true"
  - parameter: rundeck.projectsStorageType
    value: "{{ 'db' if rundeck_database_type == 'mysql' or rundeck_database_type == 'postgresql' else 'file' }}"
  - parameter: pagination.default.max
    value: "{{ rundeck_pagination_default }}"
  - parameter: loglevel.default
    value: "{{ rundeck_loglevel_default }}"
  - parameter: grails.serverURL
    value: "{{ rundeck_external_url }}"
  - parameter: dataSource.dbCreate
    value: "update"
  - parameter: dataSource.url
    value: "{% if rundeck_database_type == 'mysql' %}jdbc:mysql://{{ rundeck_database_host }}:{{ rundeck_database_port|default(3306) }}/{{ rundeck_database_name }}{% else %}{% if rundeck_database_type == 'postgresql' %}jdbc:postgresql://{{ rundeck_database_host }}:{{ rundeck_database_port|default(5432) }}/{{ rundeck_database_name }}{% else %}jdbc:h2:file:{{ rundeck_base_dir }}/data/rundeckdb;MVCC=true){% endif %}{% endif %}"
  - parameter: dataSource.driverClassName
    value: "{{ 'com.mysql.jdbc.Driver' if rundeck_database_type == 'mysql' else ('org.postgresql.Driver' if rundeck_database_type == 'postgresql' else '') }}"
  - parameter: dataSource.dialect
    value: "{{ 'org.hibernate.dialect.MySQLDialect' if rundeck_database_type == 'mysql' else ( 'org.hibernate.dialect.PostgreSQLDialect' if rundeck_database_type == 'postgresql' else '') }}"
  - parameter: dataSource.username
    value: "{{ rundeck_database_user }}"
  - parameter: dataSource.password
    value: "{{ rundeck_database_pass }}"

_rundeck_framework:
  - parameter: framework.server.hostname
    value: "{{ ansible_fqdn }}"
  - parameter: framework.server.name
    value: "{{ ansible_hostname }}"
  - parameter: framework.server.port
    value: "{{ rundeck_https_port if rundeck_ssl_enable else rundeck_http_port }}"
  - parameter: framework.server.url
    value: "{{ rundeck_external_url }}"
  - parameter: framework.projects.dir
    value: "{{ rundeck_projects_dir }}"
  - parameter: framework.var.dir
    value: "{{ rundeck_base_dir }}/var"
  - parameter: framework.logs.dir
    value: "{{ rundeck_base_dir }}/logs"
  - parameter: framework.tmp.dir
    value: "{{ rundeck_base_dir }}/var/tmp"
  - parameter: framework.libext.dir
    value: "{{ rundeck_base_dir }}/libext"
  - parameter: framework.etc.dir
    value: "{{ rundeck_config_dir }}"
  # - parameter: "framework.server.username"
  #   value: unset
  # - parameter: "framework.server.password"
  #   value: unset
  - parameter: framework.rundeck.url
    value: "{{ rundeck_external_url }}"
  - parameter: "framework.ssh.keypath"
    value: "{{ rundeck_base_dir }}/.ssh/id_rsa"
  - parameter: "framework.ssh.user"
    value: "{{ rundeck_user }}"
  - parameter: "framework.ssh.timeout"
    value: 0
  - parameter: framework.ssh-connect-timeout
    value: 0
  - parameter: framework.ssh-command-timeout
    value: 0
  - parameter: "framework.globals"
    value: "{{ rundeck_globals }}"
  # - parameter: "framework.log.dispatch.console.format"
  #   value: unset
  - parameter: framework.rundeck.execution.script.tokenexpansion.enabled
    value: true
  - parameter: rundeck.server.uuid
    value: "{{ _rundeck_uuid }}"
  - parameter: rundeck.server.url
    value: "{{ rundeck_external_url }}"
  - parameter: rundeck.tokens.file
    value: "{{ rundeck_static_tokens_file }}"
  - parameter: rdeck.base
    value: "{{ rundeck_base_dir }}"
