---
- name: Write SSL cert & key
  tags:
    - rundeck-ssl
  copy:
    dest: "{{ item.dest }}"
    content: "{{ item.content }}"
    owner: "{{ rundeck_user }}"
    group: "{{ rundeck_group }}"
    mode: u=rw,g=,o=
  loop:
    - dest: "{{ rundeck_ssl_cert_path }}"
      content: "{{ rundeck_ssl_cert }}"
    - dest: "{{ rundeck_ssl_key_path }}"
      content: "{{ rundeck_ssl_key }}"
  when:
    - rundeck_ssl_cert|length
    - rundeck_ssl_key|length

- name: Inspect PEM files
  tags:
    - rundeck-ssl
  stat:
    path: "{{ item }}"
    get_attributes: false
    get_checksum: true
    get_mime: false
  loop:
    - "{{ rundeck_ssl_cert_path }}"
    - "{{ rundeck_ssl_key_path }}"
  register: _pem_stat

- name: Calculate cert/key hash
  tags:
    - rundeck-ssl
  set_fact:
    _keypair_hash: "{{ (_pem_stat.results[0].stat.checksum + _pem_stat.results[1].stat.checksum) | hash('sha1') }}"

- name: Calculate PKCS12 filename
  tags:
    - rundeck-ssl
  set_fact:
    _p12_path: "{{ rundeck_ssl_dir }}/_rundeck-{{ _keypair_hash }}.p12"

- name: Convert PEM files to PKCS12 format
  tags:
    - rundeck-ssl
  command: |
    openssl pkcs12 -export -out {{ _p12_path }}
    -inkey {{ rundeck_ssl_key_path }}
    -in {{ rundeck_ssl_cert_path }}
    -passout pass:adminadmin
    -name rundeck
  args:
    creates: "{{ _p12_path }}"

- name: Check if keystore exists
  tags:
    - rundeck-ssl
  stat:
    path: "{{ rundeck_keystore }}"
  register: _keystore_check

- name: Get PKCS12 fingerprint
  tags:
    - rundeck-ssl
  shell: >-
    set -o pipefail &&
    openssl pkcs12 -in {{ _p12_path }} -nodes -passin pass:adminadmin
    | openssl x509 -noout -fingerprint -sha256
    | awk -F '=' '{print $2}'
  args:
    executable: /bin/bash
  register: _p12_fingerprint
  changed_when: false
  when: _keystore_check.stat.exists

- name: Get keystore fingerprint
  tags:
    - rundeck-ssl
  shell: >-
    set -o pipefail &&
    keytool -v -list -alias rundeck -keystore {{ rundeck_keystore }} -storepass adminadmin
    | grep SHA256: | awk -F 'SHA256: ' '{print $2}'
  args:
    executable: /bin/bash
  register: _keystore_fingerprint
  changed_when: false
  when: _keystore_check.stat.exists

- name: Check if fingerprints differ
  tags:
    - rundeck-ssl
  set_fact:
    _fp_diff: "{{ _p12_fingerprint.stdout_lines[0] != _keystore_fingerprint.stdout_lines[0] }}"
  when: _keystore_check.stat.exists

- name: Keystore does not exist yet
  tags:
    - rundeck-ssl
  set_fact:
    _fp_diff: true
  when: not _keystore_check.stat.exists

- name: Remove old cert
  tags:
    - rundeck-ssl
  java_cert:
    cert_url: 'dummy value - see https://github.com/ansible/ansible/issues/27982'
    cert_alias: rundeck
    keystore_path: "{{ rundeck_keystore }}"
    keystore_pass: adminadmin
    state: absent
  when: _fp_diff and _keystore_check.stat.exists

- name: Put cert in Rundeck keystore
  tags:
    - rundeck-ssl
  java_cert:
    pkcs12_path: "{{ _p12_path }}"
    pkcs12_password: adminadmin
    pkcs12_alias: rundeck
    cert_alias: rundeck
    keystore_path: "{{ rundeck_keystore }}"
    keystore_pass: adminadmin
    keystore_create: yes
    state: present
  when: _fp_diff
  notify: restart rundeck

- name: Set keystore permissions
  tags:
    - rundeck-ssl
  file:
    path: "{{ rundeck_keystore }}"
    state: file
    owner: "{{ rundeck_user }}"
    group: "{{ rundeck_group }}"
    mode: u=rw,g=r,o=
